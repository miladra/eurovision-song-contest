buildscript {
    repositories {
        maven {url "https://plugins.gradle.org/m2/"}
        gradlePluginPortal()
    }
    dependencies {
    }
}

plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
    id "jacoco"
    id "org.springframework.boot"
    id "com.gorylenko.gradle-git-properties"
    id "org.liquibase.gradle"
    id "org.sonarqube"
}

group = "com.pegasystems.vote"
version = "0.0.1-SNAPSHOT"

description = ""

sourceCompatibility=11
targetCompatibility=11
assert System.properties["java.specification.version"] == "11" || "12" || "13" || "14" || "15" || "16" || "17" || "18"

apply from: "gradle/sonar.gradle"

apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    }
}

if (project.hasProperty("prod") || project.hasProperty("gae")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("gae")) {
    apply plugin: 'maven'
    apply plugin: 'org.springframework.boot.experimental.thin-launcher'

    appengineStage.dependsOn thinResolve
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "com.pegasystems.vote.VoteApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }
    reports.html.enabled = false
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver "org.postgresql.Driver"
            url "jdbc:postgresql://localhost:5432/vote"
            username "vote"
            password "vote"
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver "org.postgresql.Driver"
            url "jdbc:postgresql://localhost:5432/vote"
            username "vote"
            password "vote"
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.pegasystems.vote.domain?dialect=org.hibernate.dialect.PostgreSQL10Dialect&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
    all {
        resolutionStrategy {
            // Inherited version from Spring Boot can't be used because of regressions:
            // To be removed as soon as spring-boot use the same version
            force 'org.liquibase:liquibase-core:4.6.1'
        }
    }
}

repositories {
    // mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation "io.dropwizard.metrics:metrics-core"
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "javax.cache:cache-api"
    implementation "org.hibernate:hibernate-core"
    implementation "com.zaxxer:HikariCP"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"
    implementation "com.github.ben-manes.caffeine:jcache:${caffeineVersion}"
    implementation "com.typesafe:config:${typesafeConfigVersion}"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    testImplementation "org.hibernate.validator:hibernate-validator"
    implementation "org.liquibase:liquibase-core:4.6.1"
    liquibaseRuntime "org.liquibase:liquibase-core:4.6.1"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibaseHibernate5Version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-loader-tools"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation "org.testcontainers:postgresql"
    implementation ("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation 'org.zalando:problem-spring-web:0.27.0'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'
    implementation 'org.testcontainers:postgresql:1.17.2'
    liquibaseRuntime "org.postgresql:postgresql:42.4.0"
    implementation 'org.postgresql:postgresql:42.4.0'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxbRuntimeVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "org.springframework.boot:spring-boot-starter-validation"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "com.h2database:h2"
    developmentOnly "org.springframework.boot:spring-boot-devtools:${springBootVersion}"
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'org.slf4j:slf4j-api:1.7.36'
}

if (project.hasProperty("gae")) {
    task createPom {
        def basePath = 'build/resources/main/META-INF/maven'
        doLast {
            pom {
                withXml(dependencyManagement.pomConfigurer)
            }.writeTo("${basePath}/${project.group}/${project.name}/pom.xml")
        }
    }
    bootJar.dependsOn = [createPom]
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.4.2"
}


compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
